/*
 * MainFrame.java
 *
 * Created on 23. Februar 2007, 08:58
 */

package com.ptvag.logeval;

import com.ptvag.logeval.extraction.FieldReplacer;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileFilter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author  xzas
 */
public class MainFrame extends javax.swing.JFrame implements Constants, IOutputter {
    
    /** Creates new form MainFrame */
    public MainFrame() {
        initComponents();
        InitExit.init(this);
        initConfigChooseCombo();
        loadKonfigButtonActionPerformed(null);
    }
    
    final static String VERSION = "v1.05";
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSplitPane1 = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        configTabPanel = new javax.swing.JPanel();
        configPanel = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        konfigDirTextField = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        konfigNameTextField = new javax.swing.JTextField();
        configChooseComboBox = new javax.swing.JComboBox();
        loadKonfigButton = new javax.swing.JButton();
        saveKonfigButton = new javax.swing.JButton();
        configDirNavButton = new javax.swing.JButton();
        logFilesTabPanel = new javax.swing.JPanel();
        directoriesPanel = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        logDirTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        nodeRecognizerTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        logRecognizerTextField = new javax.swing.JTextField();
        showFilesButton = new javax.swing.JButton();
        logFilesDirChooseButton = new javax.swing.JButton();
        removeOlderDuplicatesCheckBox = new javax.swing.JCheckBox();
        extractionLayeredPanel = new javax.swing.JPanel();
        rulesPane = new java.awt.ScrollPane();
        rulesPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        newExtractionRuleButton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        testLineTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        testRegexTextField = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        testReplaceTextField = new javax.swing.JTextField();
        testButton = new javax.swing.JButton();
        extractionTimesButton = new javax.swing.JButton();
        dbParamsTabPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        dbUrlTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jdbcDriverClassTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dbUserTextField = new javax.swing.JTextField();
        dbPasswordTextField = new javax.swing.JTextField();
        testConnectionButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        allowToCreateCheckBox = new javax.swing.JCheckBox();
        truncIfExistsCheckBox = new javax.swing.JCheckBox();
        jLabel16 = new javax.swing.JLabel();
        transactionSizeTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        batchSizeTextField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        tableNameTextField = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        maxVarcharSizeTextField = new javax.swing.JTextField();
        forceCreateCheckBox = new javax.swing.JCheckBox();
        extractToDbButton = new javax.swing.JButton();
        fileoutputPanel = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        outputFileFieldSeparatorTextField = new javax.swing.JTextField();
        outputFileInsertHeaderCheckBox = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        outputFileNameTextField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        outputFileFieldsTextField = new javax.swing.JTextField();
        extractFileButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Log Evaluator");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jTabbedPane1.setToolTipText("");

        jLabel10.setText("ConfigDir:");

        konfigDirTextField.setText("C:\\TEMP");
        konfigDirTextField.setToolTipText("where can the extraction configurations be found");

        jLabel11.setText("ConfigName:");

        konfigNameTextField.setText("logeval");
        konfigNameTextField.setToolTipText("current extraction config, textfile with unsorted properties, please use this tool to change it");

        configChooseComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        configChooseComboBox.setToolTipText("configurations found in config directory");
        configChooseComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configChooseComboBoxActionPerformed(evt);
            }
        });

        loadKonfigButton.setText("Load Config");
        loadKonfigButton.setToolTipText("load selected configuration");
        loadKonfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadKonfigButtonActionPerformed(evt);
            }
        });

        saveKonfigButton.setText("Save Konfig");
        saveKonfigButton.setToolTipText("save current configuration");
        saveKonfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveKonfigButtonActionPerformed(evt);
            }
        });

        configDirNavButton.setText(">");
        configDirNavButton.setToolTipText("navigate using dialog to configuration directory");
        configDirNavButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configDirNavButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout configPanelLayout = new org.jdesktop.layout.GroupLayout(configPanel);
        configPanel.setLayout(configPanelLayout);
        configPanelLayout.setHorizontalGroup(
            configPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(configPanelLayout.createSequentialGroup()
                .add(configPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(configPanelLayout.createSequentialGroup()
                        .add(loadKonfigButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(saveKonfigButton))
                    .add(configPanelLayout.createSequentialGroup()
                        .add(configPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel10)
                            .add(jLabel11))
                        .add(10, 10, 10)
                        .add(configPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(configPanelLayout.createSequentialGroup()
                                .add(konfigDirTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(configDirNavButton))
                            .add(configPanelLayout.createSequentialGroup()
                                .add(konfigNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 265, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(32, 32, 32)
                                .add(configChooseComboBox, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .add(52, 52, 52))
        );
        configPanelLayout.setVerticalGroup(
            configPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(configPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(configPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel10)
                    .add(konfigDirTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(configDirNavButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(configPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel11)
                    .add(konfigNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(configChooseComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(configPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(loadKonfigButton)
                    .add(saveKonfigButton))
                .addContainerGap(312, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout configTabPanelLayout = new org.jdesktop.layout.GroupLayout(configTabPanel);
        configTabPanel.setLayout(configTabPanelLayout);
        configTabPanelLayout.setHorizontalGroup(
            configTabPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(configTabPanelLayout.createSequentialGroup()
                .add(configPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 608, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(190, Short.MAX_VALUE))
        );
        configTabPanelLayout.setVerticalGroup(
            configTabPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(configTabPanelLayout.createSequentialGroup()
                .add(configPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Config", configTabPanel);

        jLabel5.setText("Directory:");

        logDirTextField.setToolTipText("root directory where logfiles of different clusternodes can be found");
        logDirTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        jLabel6.setText("Node Recognizer:");

        nodeRecognizerTextField.setToolTipText("regex to recognize directory signifying cluster");
        nodeRecognizerTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        jLabel7.setText("Log Recognizer:");

        logRecognizerTextField.setToolTipText("regex to select files to be handled");
        logRecognizerTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        showFilesButton.setText("showFiles");
        showFilesButton.setToolTipText("which files will be extracted using these entries");
        showFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showFilesAction(evt);
            }
        });

        logFilesDirChooseButton.setText(">");
        logFilesDirChooseButton.setToolTipText("navigate using dialog to directory where files to be extracted can be found in subdir");
        logFilesDirChooseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logFilesDirChooseButtonActionPerformed(evt);
            }
        });

        removeOlderDuplicatesCheckBox.setText("Remove older Duplicates");
        removeOlderDuplicatesCheckBox.setToolTipText("if there are files with the same name belonging to one node (in different directories!) don't extract older");
        removeOlderDuplicatesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        removeOlderDuplicatesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout directoriesPanelLayout = new org.jdesktop.layout.GroupLayout(directoriesPanel);
        directoriesPanel.setLayout(directoriesPanelLayout);
        directoriesPanelLayout.setHorizontalGroup(
            directoriesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(directoriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(directoriesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(directoriesPanelLayout.createSequentialGroup()
                        .add(directoriesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel6)
                            .add(jLabel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel7))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(directoriesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(logRecognizerTextField)
                            .add(nodeRecognizerTextField)
                            .add(directoriesPanelLayout.createSequentialGroup()
                                .add(logDirTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 450, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(logFilesDirChooseButton))))
                    .add(directoriesPanelLayout.createSequentialGroup()
                        .add(removeOlderDuplicatesCheckBox)
                        .add(14, 14, 14)
                        .add(showFilesButton)))
                .addContainerGap(149, Short.MAX_VALUE))
        );
        directoriesPanelLayout.setVerticalGroup(
            directoriesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(directoriesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(directoriesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(logDirTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(logFilesDirChooseButton))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(directoriesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(nodeRecognizerTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(directoriesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel7)
                    .add(logRecognizerTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(directoriesPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(removeOlderDuplicatesCheckBox)
                    .add(showFilesButton))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout logFilesTabPanelLayout = new org.jdesktop.layout.GroupLayout(logFilesTabPanel);
        logFilesTabPanel.setLayout(logFilesTabPanelLayout);
        logFilesTabPanelLayout.setHorizontalGroup(
            logFilesTabPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, directoriesPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        logFilesTabPanelLayout.setVerticalGroup(
            logFilesTabPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(logFilesTabPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(directoriesPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(219, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("LogFiles", logFilesTabPanel);

        extractionLayeredPanel.setToolTipText("maintain extraction rules");

        rulesPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        rulesPanel.setAutoscrolls(true);
        rulesPanel.setMaximumSize(new java.awt.Dimension(200, 200));
        rulesPanel.setLayout(new javax.swing.BoxLayout(rulesPanel, javax.swing.BoxLayout.Y_AXIS));
        rulesPane.add(rulesPanel);

        newExtractionRuleButton.setText("newExtractionRule");
        newExtractionRuleButton.setToolTipText("add extraction rule at end");
        newExtractionRuleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newExtractionRuleButtonActionPerformed(evt);
            }
        });

        jLabel13.setText("Line:");

        testLineTextField.setToolTipText("test line to check regex and replace on");
        testLineTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        jLabel14.setText("Regex:");

        testRegexTextField.setToolTipText("regex to be tested on Line");
        testRegexTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        jLabel15.setText("Replace:");

        testReplaceTextField.setToolTipText("replacement done after recognizing regex on line");
        testReplaceTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        testButton.setText("Test Regex");
        testButton.setToolTipText("check this regex on Line");
        testButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testButtonActionPerformed(evt);
            }
        });

        extractionTimesButton.setText("Times");
        extractionTimesButton.setToolTipText("check each pattern, how often can it be executed in 500 ms?");
        extractionTimesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractionTimesButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(newExtractionRuleButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(extractionTimesButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 355, Short.MAX_VALUE)
                        .add(testButton))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel14)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(testRegexTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 237, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jLabel15)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(testReplaceTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(testLineTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 543, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .add(19, 19, 19)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel13)
                    .add(testLineTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel14)
                    .add(testRegexTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel15)
                    .add(testReplaceTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(newExtractionRuleButton)
                    .add(extractionTimesButton)
                    .add(testButton))
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout extractionLayeredPanelLayout = new org.jdesktop.layout.GroupLayout(extractionLayeredPanel);
        extractionLayeredPanel.setLayout(extractionLayeredPanelLayout);
        extractionLayeredPanelLayout.setHorizontalGroup(
            extractionLayeredPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(extractionLayeredPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(extractionLayeredPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(extractionLayeredPanelLayout.createSequentialGroup()
                        .add(rulesPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 776, Short.MAX_VALUE)
                        .addContainerGap())
                    .add(extractionLayeredPanelLayout.createSequentialGroup()
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(8, 8, 8))))
        );
        extractionLayeredPanelLayout.setVerticalGroup(
            extractionLayeredPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(extractionLayeredPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(rulesPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 278, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Extraction", extractionLayeredPanel);

        jLabel1.setText("DbUrl:");

        dbUrlTextField.setText("jdbc:oracle:thin:@<server>:1521:<sid>");
        dbUrlTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        jLabel2.setText("Jdbc-Class:");

        jdbcDriverClassTextField.setText("oracle.jdbc.OracleDriver");
        jdbcDriverClassTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        jLabel3.setText("Db User:");

        jLabel4.setText("Db Password:");

        dbUserTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        dbPasswordTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        testConnectionButton.setText("Test Connection");
        testConnectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testConnectionButtonActionPerformed(evt);
            }
        });

        allowToCreateCheckBox.setText("Allow Create");
        allowToCreateCheckBox.setToolTipText("if table does not exist, create it");
        allowToCreateCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        allowToCreateCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        allowToCreateCheckBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        truncIfExistsCheckBox.setText("Truncate if Exists");
        truncIfExistsCheckBox.setToolTipText("empty table if it exists before extraction");
        truncIfExistsCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        truncIfExistsCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        truncIfExistsCheckBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        jLabel16.setText("Transaction Size:");

        transactionSizeTextField.setText("10000");
        transactionSizeTextField.setToolTipText("commit after this number of inserted records");
        transactionSizeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        jLabel17.setText("Batch Size:");

        batchSizeTextField.setText("100");
        batchSizeTextField.setToolTipText("use jdbc-batchmode, send after this number of records to db server");
        batchSizeTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        jLabel18.setText("Tablename:");

        tableNameTextField.setToolTipText("name of table to extract files to");
        tableNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        jLabel19.setText("Max Varchar Size:");

        maxVarcharSizeTextField.setText("255");
        maxVarcharSizeTextField.setToolTipText("default length of varchar-fields, longer extracted content will be truncated");

        forceCreateCheckBox.setText("Force Create");
        forceCreateCheckBox.setToolTipText("create table in any case new. use this if configuration has been changed");
        forceCreateCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        forceCreateCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(allowToCreateCheckBox)
                    .add(truncIfExistsCheckBox)
                    .add(forceCreateCheckBox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jLabel18)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel16)
                            .add(jLabel17)
                            .add(jLabel19))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(tableNameTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                            .add(transactionSizeTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, batchSizeTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE)
                            .add(maxVarcharSizeTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(allowToCreateCheckBox)
                    .add(jLabel18)
                    .add(tableNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(truncIfExistsCheckBox)
                    .add(jLabel16)
                    .add(transactionSizeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel17)
                    .add(batchSizeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(forceCreateCheckBox))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel19)
                    .add(maxVarcharSizeTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        extractToDbButton.setText("Extract to Db");
        extractToDbButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractToDbButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel1)
                            .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 126, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 72, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel4))
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                                .add(dbPasswordTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 261, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(testConnectionButton))
                            .add(dbUserTextField)
                            .add(jdbcDriverClassTextField)
                            .add(dbUrlTextField))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(extractToDbButton))
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(dbUrlTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(jdbcDriverClassTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(dbUserTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4)
                    .add(testConnectionButton)
                    .add(dbPasswordTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(extractToDbButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout dbParamsTabPanelLayout = new org.jdesktop.layout.GroupLayout(dbParamsTabPanel);
        dbParamsTabPanel.setLayout(dbParamsTabPanelLayout);
        dbParamsTabPanelLayout.setHorizontalGroup(
            dbParamsTabPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dbParamsTabPanelLayout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(109, Short.MAX_VALUE))
        );
        dbParamsTabPanelLayout.setVerticalGroup(
            dbParamsTabPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(dbParamsTabPanelLayout.createSequentialGroup()
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(143, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Extraction to Db", dbParamsTabPanel);

        jLabel8.setText("Separator:");

        outputFileFieldSeparatorTextField.setText(";");
        outputFileFieldSeparatorTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        outputFileInsertHeaderCheckBox.setText("insert Header");
        outputFileInsertHeaderCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        outputFileInsertHeaderCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        outputFileInsertHeaderCheckBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        jLabel9.setText("FileName:");

        outputFileNameTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        jLabel12.setText("Fields:");

        outputFileFieldsTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MainFrame.this.keyPressed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel4Layout = new org.jdesktop.layout.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(outputFileInsertHeaderCheckBox)
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(jLabel8, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(outputFileFieldSeparatorTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .add(0, 635, Short.MAX_VALUE))
                    .add(jPanel4Layout.createSequentialGroup()
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jLabel9, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                            .add(jLabel12, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(28, 28, 28)
                        .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel4Layout.createSequentialGroup()
                                .add(outputFileNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 294, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(outputFileFieldsTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel4Layout.createSequentialGroup()
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel8)
                    .add(outputFileFieldSeparatorTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(outputFileInsertHeaderCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel9)
                    .add(outputFileNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel12)
                    .add(outputFileFieldsTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        extractFileButton.setText("extract");
        extractFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extractFileButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout fileoutputPanelLayout = new org.jdesktop.layout.GroupLayout(fileoutputPanel);
        fileoutputPanel.setLayout(fileoutputPanelLayout);
        fileoutputPanelLayout.setHorizontalGroup(
            fileoutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fileoutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(fileoutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(extractFileButton))
                .addContainerGap())
        );
        fileoutputPanelLayout.setVerticalGroup(
            fileoutputPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(fileoutputPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(extractFileButton)
                .addContainerGap(277, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Extraction To File", fileoutputPanel);

        jSplitPane1.setLeftComponent(jTabbedPane1);

        outputTextArea.setColumns(20);
        outputTextArea.setRows(5);
        jScrollPane1.setViewportView(outputTextArea);

        jSplitPane1.setRightComponent(jScrollPane1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jSplitPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jSplitPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void extractionTimesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractionTimesButtonActionPerformed
// TODO add your handling code here:
        final Component[] comps = rulesPanel.getComponents();
        Thread th = new Thread(new Runnable() {
            public void run() {
                for (int i = 0; i < comps.length; i++) {
                    FieldExtraction ex = (FieldExtraction)comps[i];
                    String pattern = ex.getFieldRecognizerTextField().getText();
                    try {
                        Pattern regexPattern = Pattern.compile(pattern);
                        String replace = ex.getReplacePatternTextField().getText();
                        String testLine = testLineTextField.getText();
                        long actTime = System.currentTimeMillis();
                        int count = 0;
                        while (System.currentTimeMillis() - actTime < 500) {
                            String res = testSinglePattern(testLine, replace, regexPattern);
                            count++;
                        }
                        ex.setCountIn500(count);
                    }
                    catch(Throwable thw) {
                        println("could not count in time for: " + pattern + "because of " + thw.toString());
                    }
                }
            }
        });
        th.start();
        
    }//GEN-LAST:event_extractionTimesButtonActionPerformed
    
    private void logFilesDirChooseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logFilesDirChooseButtonActionPerformed
// TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(this.logDirTextField.getText()));
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
            logDirTextField.setText(fileChooser.getSelectedFile().getPath());
        
        
    }//GEN-LAST:event_logFilesDirChooseButtonActionPerformed
    
    private boolean changed = false;
    private void keyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyPressed
        int code = evt.getKeyCode();
        if (code != KeyEvent.VK_TAB && code != KeyEvent.VK_ENTER)
            setChanged(true);
    }//GEN-LAST:event_keyPressed
    
    private void configDirNavButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configDirNavButtonActionPerformed
// TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(konfigDirTextField.getText()));
        /*
        fileChooser.setFileFilter(new FileFilter() {
            public boolean accept(File pathname) {
                return pathname.getPath().toLowerCase().endsWith(".cfg");
            }
        });
         */
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
            konfigDirTextField.setText(fileChooser.getSelectedFile().getPath());
        this.initConfigChooseCombo();
    }//GEN-LAST:event_configDirNavButtonActionPerformed
    
    private void extractToDbButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractToDbButtonActionPerformed
// TODO add your handling code here:
        try {
            IDbConnectionFactory connfac = new LogEvalDbConnectionFactory(toLogEvalConfig(),this);
            ReplacementContext context = new ReplacementContext();
            DbHandler dbhandler = new DbHandler(toLogEvalConfig(),context,connfac,this);
            LogFilesHandler handler = new LogFilesHandler(toLogEvalConfig(),this, context);
            handler.extractFiles(dbhandler);
        } catch (Throwable thw) {
            println("extracting returned: " + thw.toString());
        }
        
    }//GEN-LAST:event_extractToDbButtonActionPerformed
    
    private void testConnectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testConnectionButtonActionPerformed
        if (new LogEvalDbConnectionFactory(toLogEvalConfig(),this).testConnection())
            println("Connection OK.");
    }//GEN-LAST:event_testConnectionButtonActionPerformed
    
    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (isChanged()) {
            if (JOptionPane.showConfirmDialog(this,"Values changed, save them?","Leaving application",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
                saveKonfigButtonActionPerformed(null);
        }
        InitExit.exit(this);
    }//GEN-LAST:event_formWindowClosing
    
    private void configChooseComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_configChooseComboBoxActionPerformed
        konfigNameTextField.setText((String)configChooseComboBox.getSelectedItem());
    }//GEN-LAST:event_configChooseComboBoxActionPerformed
    
    void addToTitle(File f) {
        String title = getTitle();
        int namepos = title.indexOf(" - ");
        if (namepos >= 0)
            title = title.substring(0,namepos) ;
        this.setTitle(title + " - " + f.getPath() + " - (" + VERSION + ")");
    }
    
    private void loadKonfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadKonfigButtonActionPerformed
        if (isChanged()) {
            if (JOptionPane.showConfirmDialog(this,"Values changed, save them?","Loading new configuration",JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
                saveKonfigButtonActionPerformed(null);
        }
        
        File f = createConfigFileName();
        if (f.exists()) {
            LogEvalConfig config = new LogEvalConfig();
            Properties props = new Properties();
            try {
                config.fromConfigFile(f);
            } catch (IOException e) {
                this.outputTextArea.append(e.toString());
            }
            this.fromLogEvalConfig(config);
            addToTitle(f);
        } else {
            outputTextArea.append("Error: not found: " + f.getPath() + "\n");
        }
        setChanged(false);
    }//GEN-LAST:event_loadKonfigButtonActionPerformed
    
    private void saveKonfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveKonfigButtonActionPerformed
        File f = createConfigFileName();
        if (f.exists()) {
            int res = JOptionPane.showConfirmDialog(this,f.getPath() + " already exists. Ok to overwrite?","Overwrite?",
                    JOptionPane.YES_NO_OPTION);
            if (res != JOptionPane.YES_OPTION)
                return;
        }
        try {
            toLogEvalConfig().toConfigFile(f);
        } catch (IOException e) {
            this.outputTextArea.append(e.toString());
        }
        String newConfig = konfigNameTextField.getText();
        initConfigChooseCombo();
        addToTitle(f);
        configChooseComboBox.setSelectedItem(newConfig);
        setChanged(false);
    }//GEN-LAST:event_saveKonfigButtonActionPerformed
    
    private void showFilesAction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showFilesAction
        LogFilesHandler handler =  new LogFilesHandler(toLogEvalConfig(),this, new ReplacementContext());
        StringBuffer res = handler.showFiles();
        if (res.length() > 0)
            outputTextArea.append(res.toString());
        else
            println("no files found");
    }//GEN-LAST:event_showFilesAction
    
    private void newExtractionRuleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newExtractionRuleButtonActionPerformed
// ExtractionRule rule = new ExtractionRule();
        // rulesPanel.add(rule);
        FieldExtraction rule = new FieldExtraction(this);
        rulesPanel.add(rule);
        rulesPanel.validate();
        System.out.println("showing rule: " + rule.isShowing());
        pack();
    }//GEN-LAST:event_newExtractionRuleButtonActionPerformed
    
    private String testSinglePattern(String testLine, String replace, Pattern regex) {
        Matcher matcher = regex.matcher(testLine);
        if (matcher.find()) {
            ReplacementContext context = new ReplacementContext();
            context.setNode("dummynode");
            context.setLine(testLine);
            context.setMatcher(matcher);
            FieldReplacer replacer = new FieldReplacer(replace);
            StringBuffer sb = new StringBuffer();
            replacer.doReplacement(context,sb);
            return sb.toString();
        } else
            return null;
    }
    
    private void testButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testButtonActionPerformed
// TODO add your handling code here:
        try {
            Pattern regexPattern = Pattern.compile(testRegexTextField.getText());
            String res = testSinglePattern(testLineTextField.getText(), testReplaceTextField.getText(), regexPattern);
            if (res != null)
                println("testresult: \"" + res + "\"");
            else
                println("not found");
        } catch (Exception e) {
            println(e.toString());
        }
    }//GEN-LAST:event_testButtonActionPerformed
    
    private void extractFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extractFileButtonActionPerformed
        LogFilesHandler handler = new LogFilesHandler(toLogEvalConfig(),this,new ReplacementContext());
        handler.extractFilesToFileSystem();
    }//GEN-LAST:event_extractFileButtonActionPerformed
    
    void initConfigChooseCombo() {
        Object current = configChooseComboBox.getSelectedItem();
        File f = new File(this.konfigDirTextField.getText());
        if (f.exists() && f.isDirectory())
            configChooseComboBox.removeAllItems();
        f.listFiles(new FilenameFilter() {
            public boolean accept(File dir, String name) {
                if (name.toLowerCase().endsWith(KONFIGEXTENSION))
                    configChooseComboBox.addItem(name);
                return false;
            }
        });
        configChooseComboBox.setSelectedItem(current);
    }
    
    File createConfigFileName() {
        String filename = this.konfigNameTextField.getText();
        if (!filename.toLowerCase().endsWith(KONFIGEXTENSION))
            filename = filename + KONFIGEXTENSION;
        File f = new File(this.konfigDirTextField.getText() + File.separator + filename);
        return f;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    
    void fromLogEvalConfig(LogEvalConfig config) {
        dbPasswordTextField.setText(config.getDbPassword());
        dbUrlTextField.setText(config.getDbUrl());
        dbUserTextField.setText(config.getDbUser());
        allowToCreateCheckBox.setSelected(config.isAllowToCreateTable());
        truncIfExistsCheckBox.setSelected(config.isTruncIfExistsTable());
        outputFileInsertHeaderCheckBox.setSelected(config.isIncludeHeader());
        jdbcDriverClassTextField.setText(config.getJdbcDriverClass());
        logDirTextField.setText(config.getLogDir());
        logRecognizerTextField.setText(config.getLogRecognizer());
        nodeRecognizerTextField.setText(config.getNodeRecognizer());
        outputFileFieldSeparatorTextField.setText(config.getOutputFileFieldSeparator());
        outputFileNameTextField.setText(config.getOutputFileName());
        outputFileFieldsTextField.setText(config.getOutputFileFields());
        testLineTextField.setText(config.getTestLine());
        testRegexTextField.setText(config.getTestRegex());
        testReplaceTextField.setText(config.getTestReplace());
        transactionSizeTextField.setText(config.getTransactionSize());
        batchSizeTextField.setText(config.getBatchSize());
        tableNameTextField.setText(config.getDestTableName());
        maxVarcharSizeTextField.setText(config.getMaxVarcharSize());
        forceCreateCheckBox.setSelected(config.isForceCreateTable());
        removeOlderDuplicatesCheckBox.setSelected(config.isRemoveOlderDuplicates());
        
        rulesPanel.removeAll();
        FieldExtractionConfig[] feConfigs = config.getFieldExtractionConfigs();
        for (int i = 0; i < feConfigs.length; i++) {
            FieldExtraction fe = new FieldExtraction(this);
            fe.fromFieldExtractionConfig(feConfigs[i]);
            rulesPanel.add(fe);
        }
        rulesPanel.validate();
    }
    
    LogEvalConfig toLogEvalConfig() {
        LogEvalConfig config = new LogEvalConfig();
        config.setDbPassword(dbPasswordTextField.getText());
        config.setDbUrl(dbUrlTextField.getText());
        config.setDbUser(dbUserTextField.getText());
        config.setIncludeHeader(outputFileInsertHeaderCheckBox.isSelected());
        config.setJdbcDriverClass(jdbcDriverClassTextField.getText());
        config.setLogDir(logDirTextField.getText());
        config.setLogRecognizer(logRecognizerTextField.getText());
        config.setNodeRecognizer(nodeRecognizerTextField.getText());
        config.setOutputFileFieldSeparator(outputFileFieldSeparatorTextField.getText());
        config.setOutputFileName(outputFileNameTextField.getText());
        config.setOutputFileFields(outputFileFieldsTextField.getText());
        config.setTestLine(testLineTextField.getText());
        config.setTestRegex(testRegexTextField.getText());
        config.setTestReplace(testReplaceTextField.getText());
        config.setAllowToCreateTable(allowToCreateCheckBox.isSelected());
        config.setTruncIfExistsTable(truncIfExistsCheckBox.isSelected());
        config.setBatchSize(batchSizeTextField.getText());
        config.setTransactionSize(transactionSizeTextField.getText());
        config.setDestTableName(tableNameTextField.getText());
        config.setMaxVarcharSize(maxVarcharSizeTextField.getText());
        config.setForceCreateTable(forceCreateCheckBox.isSelected());
        config.setRemoveOlderDuplicates(removeOlderDuplicatesCheckBox.isSelected());
        int fecount = rulesPanel.getComponentCount();
        FieldExtractionConfig[] feConfigs = new FieldExtractionConfig[fecount];
        for (int i = 0; i < fecount; i++) {
            FieldExtraction comp = (FieldExtraction)rulesPanel.getComponent(i);
            feConfigs[i] = comp.toFieldExtractionConfig();
        }
        config.setFieldExtractionConfigs(feConfigs);
        return config;
    }
    
    public void print(String s) {
        outputTextArea.append(s);
    }
    public void println(String s) {
        outputTextArea.append(s);
        outputTextArea.append("\n");
    }
    
    public void deleteFieldExtraction(FieldExtraction extraction) {
        rulesPanel.remove(extraction);
        rulesPanel.validate();
    }
    
    public javax.swing.JTextField getKonfigDirTextField() {
        return konfigDirTextField;
    }
    public javax.swing.JTextField getKonfigNameTextField() {
        return konfigNameTextField;
    }
    
    public void setCurrentConfig(String name) {
        initConfigChooseCombo();
        configChooseComboBox.setSelectedItem(name);
    }
    
    public boolean isChanged() {
        return changed;
    }
    
    public void setChanged(boolean changed) {
        this.changed = changed;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allowToCreateCheckBox;
    private javax.swing.JTextField batchSizeTextField;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox configChooseComboBox;
    private javax.swing.JButton configDirNavButton;
    private javax.swing.JPanel configPanel;
    private javax.swing.JPanel configTabPanel;
    private javax.swing.JPanel dbParamsTabPanel;
    private javax.swing.JTextField dbPasswordTextField;
    private javax.swing.JTextField dbUrlTextField;
    private javax.swing.JTextField dbUserTextField;
    private javax.swing.JPanel directoriesPanel;
    private javax.swing.JButton extractFileButton;
    private javax.swing.JButton extractToDbButton;
    private javax.swing.JPanel extractionLayeredPanel;
    private javax.swing.JButton extractionTimesButton;
    private javax.swing.JPanel fileoutputPanel;
    private javax.swing.JCheckBox forceCreateCheckBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jdbcDriverClassTextField;
    private javax.swing.JTextField konfigDirTextField;
    private javax.swing.JTextField konfigNameTextField;
    private javax.swing.JButton loadKonfigButton;
    private javax.swing.JTextField logDirTextField;
    private javax.swing.JButton logFilesDirChooseButton;
    private javax.swing.JPanel logFilesTabPanel;
    private javax.swing.JTextField logRecognizerTextField;
    private javax.swing.JTextField maxVarcharSizeTextField;
    private javax.swing.JButton newExtractionRuleButton;
    private javax.swing.JTextField nodeRecognizerTextField;
    private javax.swing.JTextField outputFileFieldSeparatorTextField;
    private javax.swing.JTextField outputFileFieldsTextField;
    private javax.swing.JCheckBox outputFileInsertHeaderCheckBox;
    private javax.swing.JTextField outputFileNameTextField;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JCheckBox removeOlderDuplicatesCheckBox;
    private java.awt.ScrollPane rulesPane;
    private javax.swing.JPanel rulesPanel;
    private javax.swing.JButton saveKonfigButton;
    private javax.swing.JButton showFilesButton;
    private javax.swing.JTextField tableNameTextField;
    private javax.swing.JButton testButton;
    private javax.swing.JButton testConnectionButton;
    private javax.swing.JTextField testLineTextField;
    private javax.swing.JTextField testRegexTextField;
    private javax.swing.JTextField testReplaceTextField;
    private javax.swing.JTextField transactionSizeTextField;
    private javax.swing.JCheckBox truncIfExistsCheckBox;
    // End of variables declaration//GEN-END:variables
    
}
